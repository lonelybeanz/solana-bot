// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/fee.proto

package feepb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HealthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthRequestMultiError, or
// nil if none found.
func (m *HealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthRequestMultiError(errors)
	}

	return nil
}

// HealthRequestMultiError is an error wrapping multiple validation errors
// returned by HealthRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthRequestMultiError) AllErrors() []error { return m }

// HealthRequestValidationError is the validation error returned by
// HealthRequest.Validate if the designated constraints aren't met.
type HealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthRequestValidationError) ErrorName() string { return "HealthRequestValidationError" }

// Error satisfies the builtin error interface
func (e HealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthRequestValidationError{}

// Validate checks the field values on HealthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthResponseMultiError,
// or nil if none found.
func (m *HealthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return HealthResponseMultiError(errors)
	}

	return nil
}

// HealthResponseMultiError is an error wrapping multiple validation errors
// returned by HealthResponse.ValidateAll() if the designated constraints
// aren't met.
type HealthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthResponseMultiError) AllErrors() []error { return m }

// HealthResponseValidationError is the validation error returned by
// HealthResponse.Validate if the designated constraints aren't met.
type HealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthResponseValidationError) ErrorName() string { return "HealthResponseValidationError" }

// Error satisfies the builtin error interface
func (e HealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthResponseValidationError{}

// Validate checks the field values on TransactionFee with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransactionFee) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionFee with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionFeeMultiError,
// or nil if none found.
func (m *TransactionFee) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionFee) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetAccounts()) > 500 {
		err := TransactionFeeValidationError{
			field:  "Accounts",
			reason: "value must contain no more than 500 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 43 || l > 44 {
			err := TransactionFeeValidationError{
				field:  fmt.Sprintf("Accounts[%v]", idx),
				reason: "value length must be between 43 and 44 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := _TransactionFee_Percentile_InLookup[m.GetPercentile()]; !ok {

		err := TransactionFeeValidationError{
			field:  "Percentile",
			reason: "value must be in list [25 50 75 95]",
		}

		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSlotRange(); val < 1 || val > 150 {

		err := TransactionFeeValidationError{
			field:  "SlotRange",
			reason: "value must be inside range [1, 150]",
		}

		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TransactionFeeMultiError(errors)
	}

	return nil
}

// TransactionFeeMultiError is an error wrapping multiple validation errors
// returned by TransactionFee.ValidateAll() if the designated constraints
// aren't met.
type TransactionFeeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionFeeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionFeeMultiError) AllErrors() []error { return m }

// TransactionFeeValidationError is the validation error returned by
// TransactionFee.Validate if the designated constraints aren't met.
type TransactionFeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionFeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionFeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionFeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionFeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionFeeValidationError) ErrorName() string { return "TransactionFeeValidationError" }

// Error satisfies the builtin error interface
func (e TransactionFeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionFee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionFeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionFeeValidationError{}

var _TransactionFee_Percentile_InLookup = map[int32]struct{}{
	25: {},
	50: {},
	75: {},
	95: {},
}

// Validate checks the field values on TransactionFeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionFeeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionFeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionFeeResponseMultiError, or nil if none found.
func (m *TransactionFeeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionFeeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPriorityFee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionFeeResponseValidationError{
					field:  "PriorityFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionFeeResponseValidationError{
					field:  "PriorityFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPriorityFee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionFeeResponseValidationError{
				field:  "PriorityFee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTip()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionFeeResponseValidationError{
					field:  "Tip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionFeeResponseValidationError{
					field:  "Tip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTip()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionFeeResponseValidationError{
				field:  "Tip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionFeeResponseMultiError(errors)
	}

	return nil
}

// TransactionFeeResponseMultiError is an error wrapping multiple validation
// errors returned by TransactionFeeResponse.ValidateAll() if the designated
// constraints aren't met.
type TransactionFeeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionFeeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionFeeResponseMultiError) AllErrors() []error { return m }

// TransactionFeeResponseValidationError is the validation error returned by
// TransactionFeeResponse.Validate if the designated constraints aren't met.
type TransactionFeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionFeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionFeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionFeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionFeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionFeeResponseValidationError) ErrorName() string {
	return "TransactionFeeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionFeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionFeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionFeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionFeeResponseValidationError{}

// Validate checks the field values on FeeValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeeValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeeValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeeValueMultiError, or nil
// if none found.
func (m *FeeValue) ValidateAll() error {
	return m.validate(true)
}

func (m *FeeValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Percentile

	// no validation rules for Value

	if len(errors) > 0 {
		return FeeValueMultiError(errors)
	}

	return nil
}

// FeeValueMultiError is an error wrapping multiple validation errors returned
// by FeeValue.ValidateAll() if the designated constraints aren't met.
type FeeValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeeValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeeValueMultiError) AllErrors() []error { return m }

// FeeValueValidationError is the validation error returned by
// FeeValue.Validate if the designated constraints aren't met.
type FeeValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeeValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeeValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeeValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeeValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeeValueValidationError) ErrorName() string { return "FeeValueValidationError" }

// Error satisfies the builtin error interface
func (e FeeValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeeValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeeValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeeValueValidationError{}

// Validate checks the field values on TransactionFeeStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionFeeStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionFeeStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionFeeStreamResponseMultiError, or nil if none found.
func (m *TransactionFeeStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionFeeStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPriorityFee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionFeeStreamResponseValidationError{
					field:  "PriorityFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionFeeStreamResponseValidationError{
					field:  "PriorityFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPriorityFee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionFeeStreamResponseValidationError{
				field:  "PriorityFee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTip()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionFeeStreamResponseValidationError{
					field:  "Tip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionFeeStreamResponseValidationError{
					field:  "Tip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTip()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionFeeStreamResponseValidationError{
				field:  "Tip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionFeeStreamResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionFeeStreamResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionFeeStreamResponseValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionFeeStreamResponseMultiError(errors)
	}

	return nil
}

// TransactionFeeStreamResponseMultiError is an error wrapping multiple
// validation errors returned by TransactionFeeStreamResponse.ValidateAll() if
// the designated constraints aren't met.
type TransactionFeeStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionFeeStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionFeeStreamResponseMultiError) AllErrors() []error { return m }

// TransactionFeeStreamResponseValidationError is the validation error returned
// by TransactionFeeStreamResponse.Validate if the designated constraints
// aren't met.
type TransactionFeeStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionFeeStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionFeeStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionFeeStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionFeeStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionFeeStreamResponseValidationError) ErrorName() string {
	return "TransactionFeeStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionFeeStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionFeeStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionFeeStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionFeeStreamResponseValidationError{}
